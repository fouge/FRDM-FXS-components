<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>Shell</Name>
  <Description>Interface "MMA8451Q\Shell" for component MMA8451Q, generated by Component Wizard</Description>
  <Author>Erich Styger</Author>
  <Version>01.001</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <EmptySection_DummyValue/>
  </MethodList>
  <EventList>
    <EmptySection_DummyValue/>
  </EventList>
  <Registration>
    <Template>Shell</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>StdIO_OutErr_FctType</Name>
      <Hint>Callback for an output or error I/O function</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef void (*%'ModuleName'%.StdIO_OutErr_FctType)(byte); /* Callback for an output or error I/O function */\n
</PreparedHint>
      <Type>typedef void (*%'ModuleName'%.StdIO_OutErr_FctType)(byte);</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>StdIO_In_FctType</Name>
      <Hint>Callback for an I/O input function.</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef void (*%'ModuleName'%.StdIO_In_FctType)(byte *); /* Callback for an I/O input function. */\n
</PreparedHint>
      <Type>typedef void (*%'ModuleName'%.StdIO_In_FctType)(byte *);</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>StdIO_KeyPressed_FctType</Name>
      <Hint>Callback which returns true if a key has been pressed</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef bool (*%'ModuleName'%.StdIO_KeyPressed_FctType)(void); /* Callback which returns true if a key has been pressed */\n
</PreparedHint>
      <Type>typedef bool (*%'ModuleName'%.StdIO_KeyPressed_FctType)(void);</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>StdIOType</Name>
      <Hint>Record containing input, output and error callback (stdin, stdout, stderr).</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>  typedef struct { /* Record containing input, output and error callback (stdin, stdout, stderr). */\n
    %'ModuleName'_StdIO_In_FctType stdIn; /* standard input */\n
    %'ModuleName'_StdIO_OutErr_FctType stdOut; /* standard output */\n
    %'ModuleName'_StdIO_OutErr_FctType stdErr; /* standard error */\n
    %'ModuleName'_StdIO_KeyPressed_FctType keyPressed; /* key pressed callback */\n
  } %'ModuleName'_StdIOType;\n
</PreparedHint>
      <RecordItem>
        <ItemName>stdIn</ItemName>
        <ItemType>StdIO_In_FctType</ItemType>
        <ItemHint>standard input</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>stdOut</ItemName>
        <ItemType>StdIO_OutErr_FctType</ItemType>
        <ItemHint>standard output</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>stdErr</ItemName>
        <ItemType>StdIO_OutErr_FctType</ItemType>
        <ItemHint>standard error</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>keyPressed</ItemName>
        <ItemType>StdIO_KeyPressed_FctType</ItemType>
        <ItemHint>key pressed callback</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>ConstStdIOType</Name>
      <Hint>constant StdIOType</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef const %'ModuleName'%.StdIOType %'ModuleName'%.ConstStdIOType; /* constant StdIOType */\n
</PreparedHint>
      <Type>typedef const %'ModuleName'%.StdIOType %'ModuleName'%.ConstStdIOType;</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>FATFS</Name>
      <Hint>Alias to FATFS type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>typedef %'ModuleName'%.FS_FATFS %'ModuleName'%.FATFS; /* Alias to FATFS type */\n
</PreparedHint>
      <Type>typedef %'ModuleName'%.FS_FATFS %'ModuleName'%.FATFS;</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>DRESULT</Name>
      <Hint>Alias to FATFS type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>typedef %'ModuleName'%.FS_DRESULT %'ModuleName'%.DRESULT; /* Alias to FATFS type */\n
</PreparedHint>
      <Type>typedef %'ModuleName'%.FS_DRESULT %'ModuleName'%.DRESULT;</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>FRESULT</Name>
      <Hint>Alias to FATFS type</Hint>
      <Generate>no</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>no</GenerateHelp>
      <PreparedHint>typedef %'ModuleName'%.FS_FRESULT %'ModuleName'%.FRESULT; /* Alias to FATFS type */\n
</PreparedHint>
      <Type>typedef %'ModuleName'%.FS_FRESULT %'ModuleName'%.FRESULT;</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>ParseCommandCallback</Name>
      <Hint>Callback for parsing a shell command</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef byte (*%'ModuleName'%.ParseCommandCallback)(const byte *cmd, bool *handled, const %'ModuleName'%.StdIOType *io); /* Callback for parsing a shell command */\n
</PreparedHint>
      <Type>typedef byte (*%'ModuleName'%.ParseCommandCallback)(const byte *cmd, bool *handled, const %'ModuleName'%.StdIOType *io);</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>ConstStdIOTypePtr</Name>
      <Hint>Pointer to constant standard I/O descriptor</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef const %'ModuleName'%.ConstStdIOType *%'ModuleName'%.ConstStdIOTypePtr; /* Pointer to constant standard I/O descriptor */\n
</PreparedHint>
      <Type>typedef const %'ModuleName'%.ConstStdIOType *%'ModuleName'%.ConstStdIOTypePtr;</Type>
      <HWTestType/>
    </Type>
    <Type>
      <UsrType>TUserType</UsrType>
      <Name>ConstParseCommandCallback</Name>
      <Hint>Callback for parsing a shell command</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef const %'ModuleName'%.ParseCommandCallback %'ModuleName'%.ConstParseCommandCallback; /* Callback for parsing a shell command */\n
</PreparedHint>
      <Type>typedef const %'ModuleName'%.ParseCommandCallback %'ModuleName'%.ConstParseCommandCallback;</Type>
      <HWTestType/>
    </Type>
  </UserTypes>
</Interface>
