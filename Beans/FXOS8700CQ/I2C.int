<?xml version="1.0" encoding="UTF-8"?>
<Interface>
  <Name>I2C</Name>
  <Description>Interface I2C for GenericI2C generated by Inheritance Wizard</Description>
  <Author />
  <Version>01.000</Version>
  <FileVersion>2</FileVersion>
  <MethodList>
    <Method>
      <TMthdItem>
        <Name>ReadAddress</Name>
        <Symbol>ReadAddress</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Read from the device. This writes (S+i2cAddr+0), (memAddr), (Sr+i2cAddr+1), (data)...(data+P)</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>i2cAddr</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>I2C Address of device</ParHint>
        </Parameter>
        <Parameter>
          <ParName>memAddr</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to device memory address</ParHint>
        </Parameter>
        <Parameter>
          <ParName>memAddrSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>number of address bytes</ParHint>
        </Parameter>
        <Parameter>
          <ParName>data</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to read buffer</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dataSize</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of read buffer</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(byte i2cAddr, byte *memAddr, byte memAddrSize, byte *data, word dataSize)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
    <Method>
      <TMthdItem>
        <Name>WriteAddress</Name>
        <Symbol>WriteAddress</Symbol>
        <TypeSpec>typeMethod</TypeSpec>
        <Hint>Write to the device: (S+i2cAddr+0), (memAddr), (data)...(data+P)</Hint>
        <ItemLevel>BASIC</ItemLevel>
        <EditLine>false</EditLine>
        <TypeSpecNameChangeAble>false</TypeSpecNameChangeAble>
        <DefaultIndex>0</DefaultIndex>
        <TextValueIndex>false</TextValueIndex>
        <RuntimeProperty>false</RuntimeProperty>
        <CanDelete>false</CanDelete>
        <IconPopup>false</IconPopup>
        <DefaultValue>true</DefaultValue>
        <Popup>false</Popup>
        <PublicMethod>true</PublicMethod>
        <IsAssembler>false</IsAssembler>
        <InDefinition>true</InDefinition>
        <Mode>meiAlwReq_!Exist</Mode>
        <ReturnType>8bit unsigned</ReturnType>
        <RetHint>Error code</RetHint>
        <ParamCount>5</ParamCount>
        <Parameter>
          <ParName>i2cAddr</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>I2C address of device</ParHint>
        </Parameter>
        <Parameter>
          <ParName>memAddr</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to device memory address</ParHint>
        </Parameter>
        <Parameter>
          <ParName>memAddrSize</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>number of address bytes</ParHint>
        </Parameter>
        <Parameter>
          <ParName>data</ParName>
          <ParType>8bit unsigned</ParType>
          <ParPassing>Address</ParPassing>
          <ParHint>Pointer to data write buffer</ParHint>
        </Parameter>
        <Parameter>
          <ParName>dataSize</ParName>
          <ParType>16bit unsigned</ParType>
          <ParPassing>Value</ParPassing>
          <ParHint>Size of data buffer in bytes</ParHint>
        </Parameter>
        <Scope>PRIVATE</Scope>
        <Declarations>
          <ANSIC>byte #M#_#C#(byte i2cAddr, byte *memAddr, byte memAddrSize, byte *data, word dataSize)</ANSIC>
        </Declarations>
      </TMthdItem>
    </Method>
  </MethodList>
  <Registration>
    <Template>GenericI2C</Template>
  </Registration>
  <UserTypes>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>TTIME</Name>
      <Hint>Time in binary format</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef struct { /* Time in binary format */\n
    byte hour; /* hours */\n
    byte min; /* minutes */\n
    byte sec; /* seconds */\n
    bool mode; /* clock mode, 0 for 12-hour mode, otherwise 0-24 hour mode */\n
    byte am_pm; /* 0: AM, otherwise PM */\n
  } %'ModuleName'_TTIME;\n</PreparedHint>
      <RecordItem>
        <ItemName>hour</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>hours</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>min</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>minutes</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>sec</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>seconds</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>mode</ItemName>
        <ItemType>Boolean</ItemType>
        <ItemHint>clock mode, 0 for 12-hour mode, otherwise 0-24 hour mode</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>am_pm</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>0: AM, otherwise PM</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
    <Type>
      <UsrType>TRecordType</UsrType>
      <Name>TDATE</Name>
      <Hint>Date in binary format</Hint>
      <Generate>yes</Generate>
      <Unique>yes</Unique>
      <GenerateHelp>yes</GenerateHelp>
      <PreparedHint>typedef struct { /* Date in binary format */\n
    byte year; /* year */\n
    byte month; /* month */\n
    byte day; /* day */\n
    bool dayOfWeek; /* Day of week, where 0 is the first day. In the range of 0..6 */\n
  } %'ModuleName'_TDATE;\n</PreparedHint>
      <RecordItem>
        <ItemName>year</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>year</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>month</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>month</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>day</ItemName>
        <ItemType>8bit unsigned</ItemType>
        <ItemHint>day</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
      <RecordItem>
        <ItemName>dayOfWeek</ItemName>
        <ItemType>Boolean</ItemType>
        <ItemHint>Day of week, where 0 is the first day. In the range of 0..6</ItemHint>
        <ItemPointer>no</ItemPointer>
      </RecordItem>
    </Type>
  </UserTypes>
</Interface>

