%-Driver pre-generated by the Component Development Environment
%-      Copyright: 1997 - 2014 Freescale Semiconductor, Inc. All Rights Reserved. 
%-
%- WARNING !
%-
%- Do not make changes to these lines (if you make some changes, you damage this driver)
%- which begins with:
%-
%-  %-STARTUSERTYPES
%-  %-ENDUSRTYPES
%-  /* END %ModuleName. */
%-  /* MODULE %ModuleName. */
%-  %-INTERNAL_METHOD_BEG
%-  %-INTERNAL_METHOD_END 
%-  %-INHERITED_EVENT_BEGIN
%-  %-INHERITED_EVENT_END
%-  %-BW_DEFINITION_START
%-  %-BW_DEFINITION_END
%-  %-BW_IMPLEMENT_START
%-  %-BW_IMPLEMENT_END
%-  %-BW_EVENT_DEFINITION_START
%-  %-BW_EVENT_DEFINITION_END
%-  %-BW_EVENT_IMPLEMENT_START
%-  %-BW_EVENT_IMPLEMENT_END
%-  %-BW_METHOD_MACROS_START
%-  %-BW_METHOD_MACROS_END
%-  %-BW_SECTIONS_INSERT
%-  %-BW_INTERN_COMMENTS_START
%-  %-BW_INTERN_COMMENTS_END
%-  %-BW_BEAN_CONSTANTS_START
%-  %-BW_BEAN_CONSTANTS_END
%-
%-
%- These lines are not comments, but they are necessary for Component Wizard
%- If you change these lines, Component Development Environment will not be responsible for loosing or damaging your code!
%-
%-
%- readyCPU ...
%- readyDEVICE ...
%-
%define DriverAuthor  Cyril Fougeray
%define DriverVersion 01.00
%define DriverDate    09/15/2014
%-
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END
%-
%-BW_INTERN_COMMENTS_START
%- List of descriptions of internal methods
%-BW_INTERN_COMMENTS_END
%-
%define CDEversion Community 
%-BW_SECTIONS_INSERT
%if Language='ANSIC'
  %-
%-
%INTERFACE
%define! Settings Common\FXAS21000Settings.inc
%define! Abstract Common\FXAS21000Abstract.inc
%include Common\Header.h

#ifndef __%'ModuleName'_H
#define __%'ModuleName'_H

/* MODULE %ModuleName. */

%ifdef SharedModules
/* Include shared modules, which are used for whole project */
  %for var from IncludeSharedModules
#include "%'var'.h"
  %endfor
%endif
/* Include inherited components */
%ifdef InhrSymbolList
  %for var from InhrSymbolList
#include "%@%var@ModuleName.h"
  %endfor
%endif
%-BW_CUSTOM_INCLUDE_START_H
%- Write your own includes here ... 
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_H
%-
%-BW_METHOD_MACROS_START
%-BW_METHOD_MACROS_END

#include "%ProcessorModule.h"

%-STARTUSERTYPES - Do not make changes between lines (included this lines) marked with %-STARTUSERTYPES and %-ENDUSRTYPES

%-ENDUSRTYPES
%-BW_BEAN_CONSTANTS_START  - Do not make changes between lines (included this lines) marked with %-BW_BEAN_CONSTANTS_START and %-BW_BEAN_CONSTANTS_END
%- No constants defined in the BeanWizard for this bean
%-BW_BEAN_CONSTANTS_END
%-BW_CUSTOM_USERTYPE_START
%- Write your own types here ...
%-  Example:
%-    typedef int TMyInteger; 
%-

#define %'ModuleName'_I2C_ADDR   (%I2CSlaveAddress) /* I2C slave device address as set in the properties */

#define FXA_ODR		FXA_DR_%OutputDataRate

/* Data registers */
#define FXA_OUT_X_MSB			0x01

#define FXA_WHO_AM_I			0x0C
#define FXA_WHO_AM_I_VAL	0xD1

/* Control register 1 configuration */
#define FXA_CTRL_REG_1		0x13	
#define FXA_DR_100				(0x01<<2)		/* Data rate 100Hz (10ms) */
#define FXA_DR_50					(0x02<<2)		/* Data rate 50Hz (20ms) */
#define FXA_DR_25					(0x03<<2)		/* Data rate 25Hz (40ms) */
#define FXA_RST_BIT_MASK 	(1<<6)			/* Software Reset */
#define FXA_STANDBY_MODE	0x00				/* Digital communication only (I2C, SPI) */
#define FXA_READY_MODE		0x01				/* Ready to measure but no sample acquisition is performed */
#define FXA_ACTIVE_MODE		(1<<1)			/* Device fully functional */

%-BW_CUSTOM_USERTYPE_END

%-BW_DEFINITION_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN WhoAmI
%ifdef WhoAmI
%include Common\FXAS21000WhoAmI.inc
uint8_t %'ModuleName'%.%WhoAmI(uint8_t *value);
%define! Parvalue
%define!  RetVal
%endif  %-WhoAmI
%-BW_METHOD_END WhoAmI

%-*****************************************************************************************************
%-BW_METHOD_BEGIN isEnabled
%ifdef isEnabled
%include Common\FXAS21000isEnabled.inc
uint8_t %'ModuleName'%.%isEnabled(bool *isEnabled);
%define! ParisEnabled
%define!  RetVal
%endif  %-isEnabled
%-BW_METHOD_END isEnabled

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
%include Common\FXAS21000Enable.inc
uint8_t %'ModuleName'%.%Enable();
%define!  RetVal
%endif  %-Enable
%-BW_METHOD_END Enable

%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetRawXYZ
%ifdef GetRawXYZ
%include Common\FXAS21000GetRawXYZ.inc
uint8_t %'ModuleName'%.%GetRawXYZ(int16_t *xyz);
%define! Parxyz
%define!  RetVal
%endif  %-GetRawXYZ
%-BW_METHOD_END GetRawXYZ

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%include Common\FXAS21000Init.inc
uint8_t %'ModuleName'%.%Init();
%define!  RetVal
%endif  %-Init
%-BW_METHOD_END Init

%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-************************************************************************************************************
%-BW_DEFINITION_END
/* END %ModuleName. */

#endif 
/* ifndef __%'ModuleName'_H */
%include Common\Header.End
%-
%-BW_EVENT_DEFINITION_START
%-BW_EVENT_DEFINITION_END
%IMPLEMENTATION
%define! Settings Common\FXAS21000Settings.inc
%define! Abstract Common\FXAS21000Abstract.inc
%include Common\Header.C

/* MODULE %ModuleName. */

%for var from EventModules
#include "%var.h"
%endfor
#include "%'ModuleName'.h"
%-BW_CUSTOM_INCLUDE_START_M
%- Write your own includes here ...
%-   Example:
%-     #include "header_name.h"
%-
%-BW_CUSTOM_INCLUDE_END_M

%-BW_CUSTOM_VARIABLE_START
%- Write your static variables here 
%-   Example:
%-     static int counter1;
%-     int %'ModuleName'%.counter2;


%-
%-BW_CUSTOM_VARIABLE_END
%-BW_INTERN_METHOD_DECL_START
%- List of internal methods headers
%-BW_INTERN_METHOD_DECL_END
%-BW_IMPLEMENT_START
%-*****************************************************************************************************
%-BW_METHOD_BEGIN WhoAmI
%ifdef WhoAmI
%define! Parvalue
%define! RetVal
%include Common\FXAS21000WhoAmI.inc
uint8_t %'ModuleName'%.%WhoAmI(uint8_t *value)
{
%CODE_BEGIN
	return %@I2C_FXAS_Interface@'ModuleName'%.ReadByteAddress8(%'ModuleName'_I2C_ADDR, FXA_WHO_AM_I, value);
%CODE_END
}
%endif %-WhoAmI
%-BW_METHOD_END WhoAmI

%-*****************************************************************************************************
%-BW_METHOD_BEGIN isEnabled
%ifdef isEnabled
%define! ParisEnabled
%define! RetVal
%include Common\FXAS21000isEnabled.inc
uint8_t %'ModuleName'%.%isEnabled(bool *isEnabled)
{
%CODE_BEGIN
	uint8_t val, res;

  res = %@I2C_FXAS_Interface@'ModuleName'%.ReadByteAddress8(%'ModuleName'_I2C_ADDR, FXA_CTRL_REG_1, &val);
  if (res!=ERR_OK) {
    return ERR_FAILED;
  }
  *isEnabled = (val & FXA_ACTIVE_MODE)!=0; /* TRUE if bit is set, FALSE otherwise */
  return ERR_OK;
%CODE_END
}
%endif %-isEnabled
%-BW_METHOD_END isEnabled

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Enable
%ifdef Enable
%define! RetVal
%include Common\FXAS21000Enable.inc
uint8_t %'ModuleName'%.%Enable()
{
%CODE_BEGIN
  uint8_t val, res;

  res = %@I2C_FXAS_Interface@'ModuleName'%.ReadByteAddress8(%'ModuleName'_I2C_ADDR, FXA_CTRL_REG_1, &val);
  if (res!=ERR_OK) {
    return res;
  }

  if(val & FXA_ACTIVE_MODE)
	  return ERR_OK;

  val |= FXA_ACTIVE_MODE; /* enable device */
  return %@I2C_FXAS_Interface@'ModuleName'%.WriteByteAddress8(%'ModuleName'_I2C_ADDR, FXA_CTRL_REG_1, val);
%CODE_END
}
%endif %-Enable
%-BW_METHOD_END Enable

%-*****************************************************************************************************
%-BW_METHOD_BEGIN GetRawXYZ
%ifdef GetRawXYZ
%define! Parxyz
%define! RetVal
%include Common\FXAS21000GetRawXYZ.inc
uint8_t %'ModuleName'%.%GetRawXYZ(int16_t *xyz)
{
%CODE_BEGIN
	static const uint8_t addr = FXA_OUT_X_MSB;
 	uint8_t rawXyz[6];
 	uint8_t res;
 	
	res = %@I2C_FXAS_Interface@'ModuleName'%.ReadAddress(%'ModuleName'_I2C_ADDR, (uint8_t*)&addr, sizeof(addr), &rawXyz[0], 6);
	
	xyz[0] = ((int16_t)(rawXyz[0] << 8) | rawXyz[1]);
	xyz[1] = ((int16_t)(rawXyz[2] << 8) | rawXyz[3]);
	xyz[2] = ((int16_t)(rawXyz[4] << 8) | rawXyz[5]);
	
	return res;
%CODE_END
}
%endif %-GetRawXYZ
%-BW_METHOD_END GetRawXYZ

%-*****************************************************************************************************
%-BW_METHOD_BEGIN Init
%ifdef Init
%define! RetVal
%include Common\FXAS21000Init.inc
uint8_t %'ModuleName'%.%Init()
{
%CODE_BEGIN
	static uint8_t data;
	uint8_t val;

	if(%'ModuleName'%.WhoAmI(&val) != ERR_OK){
		return ERR_FAILED;
	}
	if (val!=FXA_WHO_AM_I_VAL) {
		return ERR_FAILED;
	}
	
	/* Perform a reset */
	data = FXA_RST_BIT_MASK;
	if(%@I2C_FXAS_Interface@'ModuleName'%.WriteByteAddress8(%'ModuleName'_I2C_ADDR, FXA_CTRL_REG_1, data) != ERR_OK){
		return ERR_FAILED;
	}
	
	/* Wait for the reset to be completed. */
	do{
		%@I2C_FXAS_Interface@'ModuleName'%.ReadByteAddress8(%'ModuleName'_I2C_ADDR, FXA_CTRL_REG_1, &val);
	}while(val && FXA_RST_BIT_MASK);
	
	
	/* Set Output Data Rate (ODR) and Ready mode */
	data = FXA_ODR | FXA_READY_MODE;
	if(%@I2C_FXAS_Interface@'ModuleName'%.WriteByteAddress8(%'ModuleName'_I2C_ADDR, FXA_CTRL_REG_1, data) != ERR_OK){
		return ERR_FAILED;
	}
	
	return ERR_OK;
%CODE_END
}
%endif %-Init
%-BW_METHOD_END Init

%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-*****************************************************************************************************


%-************************************************************************************************************
%-BW_IMPLEMENT_END
/* END %ModuleName. */

%include Common\Header.End
%-
%-
%-BW_EVENT_IMPLEMENT_START
%-BW_EVENT_IMPLEMENT_END
%INITIALIZATION
  /* ### %DeviceType "%DeviceName" init code ... */
%CODE_BEGIN
  /* Write code here ... */
%CODE_END
%-
%ENABLE
%CODE_BEGIN
%CODE_END
%-
%else %- Language (& Compiler)
  %error^ This component is not implemented in selected language & compiler !
%endif %- Language (& Compiler)
%DEBUG
%ALL_SYMBOLS
%-
